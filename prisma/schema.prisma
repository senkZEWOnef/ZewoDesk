generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id            String          @id
  name          String
  email         String?         @unique
  ProjectSignup ProjectSignup[]
}

model Expense {
  id          BigInt   @id @default(autoincrement())
  projectId   String
  description String
  amountCents Int
  category    String?
  incurredAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  Project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ExternalConnection {
  id           String   @id
  provider     String
  accountLabel String?
  oauthMeta    Json?
  createdAt    DateTime @default(now())
}

model IntegrationEvent {
  id         BigInt   @id @default(autoincrement())
  projectId  String
  source     String
  type       String
  payload    Json
  occurredAt DateTime @default(now())
  indexedAt  DateTime @default(now())
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, occurredAt(sort: Desc)])
}

model Invoice {
  id              String    @id
  projectId       String
  title           String?
  amountCents     Int
  status          String    @default("draft")
  stripeInvoiceId String?
  issuedAt        DateTime?
  paidAt          DateTime?
  Project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Project {
  id               String             @id
  slug             String             @unique
  name             String
  description      String?
  liveUrl          String?
  repoFullName     String?
  deployProvider   String?
  deployExternalId String?
  visibility       String             @default("private")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  previewImage     String?
  completionPct    Int?               @default(0)
  Expense          Expense[]
  IntegrationEvent IntegrationEvent[]
  Invoice          Invoice[]
  ProjectDocs      ProjectDocs?
  ProjectSignup    ProjectSignup[]
  ProjectStatus    ProjectStatus?
}

model ProjectDocs {
  projectId       String   @id
  readmeMd        String?
  notesMd         String   @default("")
  brainstormingMd String   @default("")
  updatedAt       DateTime
  dbDiagramData   String?
  Project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectSignup {
  id         BigInt   @id @default(autoincrement())
  projectId  String
  clientId   String?
  email      String?
  meta       Json?
  signedUpAt DateTime @default(now())
  Client     Client?  @relation(fields: [clientId], references: [id])
  Project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectStatus {
  projectId       String    @id
  lastCommitSha   String?
  lastCommitAt    DateTime?
  lastDeployId    String?
  lastDeployState String?
  lastDeployAt    DateTime?
  uptimePct       Decimal?  @db.Decimal(5, 2)
  updatedAt       DateTime
  Project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
